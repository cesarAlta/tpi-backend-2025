@startuml TPI-Backend-Containers
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml

Person(cliente, "Cliente (frontend/mobile)", "Usuario que solicita traslados, consulta seguimiento")
Person(operador, "Operador / Administrador", "Gestiona catálogos, asigna camiones")
Person(transportista, "Transportista", "Registra inicio/fin de tramos")

System_Boundary(system,"TPI - Backend (Microservicios)") {
  Container(gateway, "API Gateway", "Spring Cloud Gateway", "Entrada única, validación inicial de JWT, routing")
  Container(keycloak, "Keycloak", "Keycloak", "Authn/Authz, gestión de roles (cliente, operador, transportista)")

  Container(clienteSvc, "Cliente-Service", "Spring Boot + MySQL", "CRUD clientes")
  Container(contenedorSvc, "Contenedor-Service", "Spring Boot + MySQL", "CRUD contenedores, estados")
  Container(camionSvc, "Camion-Service", "Spring Boot + MySQL", "Gestión camiones y disponibilidad")
  Container(depositoSvc, "Deposito-Service", "Spring Boot + MySQL", "Gestión depósitos y geo")
  Container(solicitudSvc, "Solicitud-Service", "Spring Boot + MySQL", "Ciclo de vida de solicitud")
  Container(rutaSvc, "Ruta-Service", "Spring Boot + MySQL", "Cálculo rutas, costes; integra Google Maps API")
  Container(tarifaSvc, "Tarifa-Service", "Spring Boot + MySQL", "Parámetros de tarifación")
  Container(logging, "Logging/Monitoring", "ELK/Prometheus (opcional)", "Centraliza logs y métricas")
}

Rel(cliente, gateway, "HTTP + JWT")
Rel(operador, gateway, "HTTP + JWT")
Rel(transportista, gateway, "HTTP + JWT")

Rel(gateway, keycloak, "Validates tokens / OpenID Connect")
Rel(gateway, clienteSvc, "HTTP (REST)")
Rel(gateway, contenedorSvc, "HTTP (REST)")
Rel(gateway, camionSvc, "HTTP (REST)")
Rel(gateway, depositoSvc, "HTTP (REST)")
Rel(gateway, solicitudSvc, "HTTP (REST)")
Rel(gateway, rutaSvc, "HTTP (REST)")
Rel(gateway, tarifaSvc, "HTTP (REST)")

Rel(solicitudSvc, clienteSvc, "REST: consulta/crea cliente")
Rel(solicitudSvc, contenedorSvc, "REST: crea/consulta contenedor")
Rel(solicitudSvc, rutaSvc, "REST: solicita rutas estimadas / asigna ruta")
Rel(rutaSvc, depositoSvc, "REST: obtiene depósitos")
Rel(rutaSvc, camionSvc, "REST: filtra camiones aptos por capacidad")
Rel(rutaSvc, tarifaSvc, "REST: calcula tarifas aproximadas")
Rel(rutaSvc, "Google Maps Directions API", "REST API (HTTP) -- distance/duration")

' Líneas corregidas
Rel(clienteSvc, logging, "Envía logs/métricas")
Rel(contenedorSvc, logging, "Envía logs/métricas")
Rel(camionSvc, logging, "Envía logs/métricas")
Rel(depositoSvc, logging, "Envía logs/métricas")
Rel(solicitudSvc, logging, "Envía logs/métricas")
Rel(rutaSvc, logging, "Envía logs/métricas")
Rel(tarifaSvc, logging, "Envía logs/métricas")
Rel(gateway, logging, "Envía logs/métricas")
' Nota: No es necesario incluir a keycloak, ya que no es un microservicio propio

@enduml
